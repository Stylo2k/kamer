openapi: '3.0.2'
info:
  title: Team 13 API Design
  description: API for properties
  version: 0.1.9

servers:
  - url: https://api.server.test/v1

paths:
 
  /properties/addProperty:
    post: 
      tags:
        - Properties by Id
      operationId: postProperty
      summary: Posts a property
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property_'
          text/csv:
            schema:
              $ref: '#/components/schemas/Property_'
      responses:
        '201':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'
     
        
  /properties/{id}:
  
    parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/contentType'

    get:
      tags:
        - Properties by Id
      operationId: getPropertyById
      summary: Gets a property by id
      description: This resource represents a description of the details of the property selected by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property_'
            text/csv:
              schema:
                $ref: '#/components/schemas/Property_'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

    put: 
      tags:
        - Properties by Id
      operationId: putPropertyById
      summary: Modifies a property by id
      description: This resource modifies the details of an existing property selected by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property_'
          text/csv:
            schema:
              $ref: '#/components/schemas/Property_'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

    delete: 
      tags:
        - Properties by Id
      operationId: deletePropertyById
      summary: Delete a property by id
      description: This resource deletes a property from the database selected by id
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'


  /properties/location:
    parameters:
      - $ref: '#/components/parameters/contentType'
      - $ref: '#/components/parameters/longitude'
      - $ref: '#/components/parameters/latitude'

    get:
      tags:
        - Properties by Location
      operationId: getPropertyByLocation
      summary: Gets a property by location (longitude, latitude)
      responses:
        '200':
         description: OK
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property_'
            text/csv:
              schema:
                $ref: '#/components/schemas/Property_'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'
          
    put:
      tags:
        - Properties by Location
      operationId: putPropertyByLocation
      summary: Updates a property based on its location.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property_'
          text/csv:
            schema:
              $ref: '#/components/schemas/Property_'
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'
      
    
    delete:
      tags:
        - Properties by Location
      operationId: deletePropertyByLocation
      summary: delete properties by latitude and longitude
      description: deletes all properties in the given latitude and longitude
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /properties/{city}: 
    parameters:
      - $ref: '#/components/parameters/city'
      - $ref: '#/components/parameters/minRange'
      - $ref: '#/components/parameters/maxRange'
      - $ref: '#/components/parameters/N'
      - $ref: '#/components/parameters/budget'
      - $ref: '#/components/parameters/ascOrDesc'
      - $ref: '#/components/parameters/pricePerSqrMOrder'
      - $ref: '#/components/parameters/minArea'
      - $ref: '#/components/parameters/maxArea'
      - $ref: '#components/parameters/pets'
    get:
      tags:
        - Find Properties by city and filter
      operationId: getPropertiesByCityByFilter
      summary: get properties in city by filters
      description: returns list of properties in a given city with a range of filters
      responses:
        '200':  
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property_'
            text/csv:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Property_'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'



  /stats/{city}:
    parameters:
      - $ref: '#/components/parameters/city'
          
    get:
      tags:
        - Stats
      summary: Gets mean, median and standard deviation for rental cost and required deposit.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CityStats'
            text/csv:
              schema:
                $ref: '#/components/schemas/CityStats'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '5XX':
          $ref: '#/components/responses/ServerError'
  


### 
### COMPONENTS PART
###

components:

  parameters:
  
    contentType:
      name: contentType
      in: query
      required: false
      description: The content type the page will return. Can be json or csv.
      schema:
        $ref: '#/components/schemas/contentType'
        
    city: 
      name: city
      in: path
      required: true
      description: The name of the city
      schema: 
        $ref: '#/components/schemas/city'
    
    id:
      in: path
      name: id
      required: true
      schema:
        type: string
        description: the id of the property
        example: room-1690812
    
    minArea: 
      in: query
      name: min
      required: false
      example: 400
      schema:
        type: number
      description: a minimum
      
    maxArea: 
      in: query
      name: min
      required: false
      example: 1200
      schema:
        type: number
      description: a maximum

    minRange: 
      in: query
      name: min
      required: false
      example: 400
      schema:
        type: number
      description: a minimum
      
    maxRange: 
      in: query
      name: min
      required: false
      example: 1200
      schema:
        type: number
      description: a maximum
    
    N:
      in: query
      name: N
      required: false
      schema:
        type: integer
        default: 10
      description: the number of properties you want to see
      example: 4
      
    ascOrDesc:
      in: query
      name: ascOrDesc
      required: false
      schema:
        type: string
        enum:
          - desc
          - asc
        default: asc
      description: the way to order the result data
      example: desc

    pricePerSqrMOrder:
      in: query
      name: pricePerSqrMOrder
      required: false
      schema:
        type: integer
      description: the price per square meter of properties in the city
      example: 25

    budget:
      in: query
      name: budget
      required: false
      schema:
        type: integer
      description: the budget for the properties in the area
      example: 25000
    
    longitude:
        in: query
        name: longitude
        required: true
        schema:
          type: number
        description: latitude of the property
        example: 53.2216926
    
    latitude:
      in: query
      name: latitude
      required: true
      description: The latitude of the location
      schema:
        type: integer
        format: double
      example: 6.5656198
    
    pets: 
      in: query
      name: pets
      required: false
      schema:
        type: string
        enum:
          - Yes
          - No
      description: Wether or not pets are allowed in the room.
      example: Yes
      
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        text/csv:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        text/csv:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Server error; no results, try again later
      content:
        application/json: 
          schema: 
            $ref: '#/components/schemas/Error'
        ext/csv:
          schema:
            $ref: '#/components/schemas/Error'
          
          
  schemas:
  
    city:
      type: string
      description: The name of the city
      example: Rotterdam
      
    CityStats:
      type: object
      properties:
        rcMean: 
          type: number
          format: double
          example: 512.23
        rcMedian:
          type: number
          format: double
          example: 600.23
        rcStandardDeviation:
          type: number
          format: double
          example: 51.34
        rdMean: 
          type: number
          format: double
          example: 547.23
        rdMedian:
          type: number
          format: double
          example: 400.23
        rdStandardDeviation:
          type: number
          format: double
          example: 39.34
        

    contentType:
      type: string
      enum:
        - application/json
        - text/csv
      default: application/json
      example: application/json

      
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message


    Property_:
      type: object
      properties:
        id:
          type: string
          example: room-1690812
        areaSqm:
          type: integer
          format: int64
          example: 14
        city: 
          type: string
          example: Rotterdam
        furnish:
          type: string
          example: Unfurnished
        latitude:
          type: string
          example: 51.8966010000
        longitude:
          type: string
          example: 4.5149930000
        postalCode:
          type: string
          example: 3074HN
        postedAgo:
          type: string
          example: 4w
        propertyType:
          type: string
          example: Room
        rawAvailability:
          type: string
          example: 26-06-'19 - Indefinite period
        rent:
          type: integer
          format: int32
          example: 500
        source:
          type: string
          example: kamernet
        title:
          type: string
          example: West-Varkenoordseweg
        url: 
          type: string
          example: "https://kamernet.nl/en/for-rent/room-rotterdam/west-varkenoordseweg/room-1686123"
        additionalCosts:
          type: integer
          format: int32
          example: 50
        deposit: 
          type: integer
          format: int32
          example: 500
        descriptionNonTranslated:
          type: string
          example: Nice room for rent, accros the Feyenoord stadium in Rotterdam. It has shared Bathroom and kitchen. There are a few room for rent in the building, so if you maybe like to live with your friends, this is maybe an option. Pls contact us for more information.
        descriptionTranslated:
          type: string
          example: Nice room for rent, accros the Feyenoord stadium in Rotterdam. It has shared Bathroom and kitchen. There are a few room for rent in the building, so if you maybe like to live with your friends, this is maybe an option. Pls contact us for more information.
        gender:
          type: string
          example: mixed
        internet:
          type: string
          enum:
            - Yes
            - No
          example: Yes
        matchCapacity:
          type: string
          example: 1
        matchGender:
          type: string
          example: Not important
        pageDescription:
          type: string
          example: Room for rent in Rotterdam, West-Varkenoordseweg, for €500 a month. Interested? React now!
        pageTitle: 
          type: string
          example: Room for rent in Rotterdam €500 | Kamernet
        pets: 
          type: string
          enum:
            - Yes
            - No
          example: Yes
        registrationCost:
          type: integer
          format: int32
          example: 0
        userDisplayName:
          type: string
          example: Huize west
        userId:
          type: string
          example: 4680711
        userPhotoUrl:
          type: string
          example: https://resources.kamernet.nl/Content/images/studenthouse/SH Placeholder.png
